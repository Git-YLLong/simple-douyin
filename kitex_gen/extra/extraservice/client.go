// Code generated by Kitex v0.3.1. DO NOT EDIT.

package extraservice

import (
	"context"
	"github.com/Git-YLLong/simple-douyin/kitex_gen/extra"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FavoriteAction(ctx context.Context, req *extra.DouyinFavoriteActionRequest, callOptions ...callopt.Option) (r *extra.DouyinFavoriteActionResponse, err error)
	CommentAction(ctx context.Context, req *extra.DouyinCommentActionRequest, callOptions ...callopt.Option) (r *extra.DouyinCommentActionResponse, err error)
	CommentList(ctx context.Context, req *extra.DouyinCommentListRequest, callOptions ...callopt.Option) (r *extra.DouyinCommentListResponse, err error)
	RelationAction(ctx context.Context, req *extra.DouyinRelationActionRequest, callOptions ...callopt.Option) (r *extra.DouyinRelationActionResponse, err error)
	RelationFollowList(ctx context.Context, req *extra.DouyinRelationFollowListRequest, callOptions ...callopt.Option) (r *extra.DouyinRelationFollowListResponse, err error)
	RelationFollowerList(ctx context.Context, req *extra.DouyinRelationFollowerListRequest, callOptions ...callopt.Option) (r *extra.DouyinRelationFollowerListResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kExtraServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kExtraServiceClient struct {
	*kClient
}

func (p *kExtraServiceClient) FavoriteAction(ctx context.Context, req *extra.DouyinFavoriteActionRequest, callOptions ...callopt.Option) (r *extra.DouyinFavoriteActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteAction(ctx, req)
}

func (p *kExtraServiceClient) CommentAction(ctx context.Context, req *extra.DouyinCommentActionRequest, callOptions ...callopt.Option) (r *extra.DouyinCommentActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentAction(ctx, req)
}

func (p *kExtraServiceClient) CommentList(ctx context.Context, req *extra.DouyinCommentListRequest, callOptions ...callopt.Option) (r *extra.DouyinCommentListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentList(ctx, req)
}

func (p *kExtraServiceClient) RelationAction(ctx context.Context, req *extra.DouyinRelationActionRequest, callOptions ...callopt.Option) (r *extra.DouyinRelationActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RelationAction(ctx, req)
}

func (p *kExtraServiceClient) RelationFollowList(ctx context.Context, req *extra.DouyinRelationFollowListRequest, callOptions ...callopt.Option) (r *extra.DouyinRelationFollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RelationFollowList(ctx, req)
}

func (p *kExtraServiceClient) RelationFollowerList(ctx context.Context, req *extra.DouyinRelationFollowerListRequest, callOptions ...callopt.Option) (r *extra.DouyinRelationFollowerListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RelationFollowerList(ctx, req)
}

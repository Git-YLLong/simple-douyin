// Code generated by Kitex v0.3.1. DO NOT EDIT.

package extraservice

import (
	"context"
	"github.com/Git-YLLong/simple-douyin/kitex_gen/extra"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return extraServiceServiceInfo
}

var extraServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ExtraService"
	handlerType := (*extra.ExtraService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAction":       kitex.NewMethodInfo(favoriteActionHandler, newExtraServiceFavoriteActionArgs, newExtraServiceFavoriteActionResult, false),
		"CommentAction":        kitex.NewMethodInfo(commentActionHandler, newExtraServiceCommentActionArgs, newExtraServiceCommentActionResult, false),
		"CommentList":          kitex.NewMethodInfo(commentListHandler, newExtraServiceCommentListArgs, newExtraServiceCommentListResult, false),
		"RelationAction":       kitex.NewMethodInfo(relationActionHandler, newExtraServiceRelationActionArgs, newExtraServiceRelationActionResult, false),
		"RelationFollowList":   kitex.NewMethodInfo(relationFollowListHandler, newExtraServiceRelationFollowListArgs, newExtraServiceRelationFollowListResult, false),
		"RelationFollowerList": kitex.NewMethodInfo(relationFollowerListHandler, newExtraServiceRelationFollowerListArgs, newExtraServiceRelationFollowerListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "extra",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*extra.ExtraServiceFavoriteActionArgs)
	realResult := result.(*extra.ExtraServiceFavoriteActionResult)
	success, err := handler.(extra.ExtraService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newExtraServiceFavoriteActionArgs() interface{} {
	return extra.NewExtraServiceFavoriteActionArgs()
}

func newExtraServiceFavoriteActionResult() interface{} {
	return extra.NewExtraServiceFavoriteActionResult()
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*extra.ExtraServiceCommentActionArgs)
	realResult := result.(*extra.ExtraServiceCommentActionResult)
	success, err := handler.(extra.ExtraService).CommentAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newExtraServiceCommentActionArgs() interface{} {
	return extra.NewExtraServiceCommentActionArgs()
}

func newExtraServiceCommentActionResult() interface{} {
	return extra.NewExtraServiceCommentActionResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*extra.ExtraServiceCommentListArgs)
	realResult := result.(*extra.ExtraServiceCommentListResult)
	success, err := handler.(extra.ExtraService).CommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newExtraServiceCommentListArgs() interface{} {
	return extra.NewExtraServiceCommentListArgs()
}

func newExtraServiceCommentListResult() interface{} {
	return extra.NewExtraServiceCommentListResult()
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*extra.ExtraServiceRelationActionArgs)
	realResult := result.(*extra.ExtraServiceRelationActionResult)
	success, err := handler.(extra.ExtraService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newExtraServiceRelationActionArgs() interface{} {
	return extra.NewExtraServiceRelationActionArgs()
}

func newExtraServiceRelationActionResult() interface{} {
	return extra.NewExtraServiceRelationActionResult()
}

func relationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*extra.ExtraServiceRelationFollowListArgs)
	realResult := result.(*extra.ExtraServiceRelationFollowListResult)
	success, err := handler.(extra.ExtraService).RelationFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newExtraServiceRelationFollowListArgs() interface{} {
	return extra.NewExtraServiceRelationFollowListArgs()
}

func newExtraServiceRelationFollowListResult() interface{} {
	return extra.NewExtraServiceRelationFollowListResult()
}

func relationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*extra.ExtraServiceRelationFollowerListArgs)
	realResult := result.(*extra.ExtraServiceRelationFollowerListResult)
	success, err := handler.(extra.ExtraService).RelationFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newExtraServiceRelationFollowerListArgs() interface{} {
	return extra.NewExtraServiceRelationFollowerListArgs()
}

func newExtraServiceRelationFollowerListResult() interface{} {
	return extra.NewExtraServiceRelationFollowerListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, req *extra.DouyinFavoriteActionRequest) (r *extra.DouyinFavoriteActionResponse, err error) {
	var _args extra.ExtraServiceFavoriteActionArgs
	_args.Req = req
	var _result extra.ExtraServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, req *extra.DouyinCommentActionRequest) (r *extra.DouyinCommentActionResponse, err error) {
	var _args extra.ExtraServiceCommentActionArgs
	_args.Req = req
	var _result extra.ExtraServiceCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, req *extra.DouyinCommentListRequest) (r *extra.DouyinCommentListResponse, err error) {
	var _args extra.ExtraServiceCommentListArgs
	_args.Req = req
	var _result extra.ExtraServiceCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationAction(ctx context.Context, req *extra.DouyinRelationActionRequest) (r *extra.DouyinRelationActionResponse, err error) {
	var _args extra.ExtraServiceRelationActionArgs
	_args.Req = req
	var _result extra.ExtraServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowList(ctx context.Context, req *extra.DouyinRelationFollowListRequest) (r *extra.DouyinRelationFollowListResponse, err error) {
	var _args extra.ExtraServiceRelationFollowListArgs
	_args.Req = req
	var _result extra.ExtraServiceRelationFollowListResult
	if err = p.c.Call(ctx, "RelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowerList(ctx context.Context, req *extra.DouyinRelationFollowerListRequest) (r *extra.DouyinRelationFollowerListResponse, err error) {
	var _args extra.ExtraServiceRelationFollowerListArgs
	_args.Req = req
	var _result extra.ExtraServiceRelationFollowerListResult
	if err = p.c.Call(ctx, "RelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
